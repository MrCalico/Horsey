@page "/"
@using WebClient.Data;

<style>
.StandingCard2 {
    background: lightyellow;
    bottom: 0;
    box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
    display: none;
    left: 0;
    padding: 0.6rem 1.25rem 0.7rem 1.25rem;
    position: fixed;
    width: 100%;
    z-index: 1000;
}
</style>

<div class="jumbotron">
    <h1>Horsey world!</h1>
    <h3>Welcome to your Horsey World Adventure.</h3>
</div>

<div class="card-group">
    @if (horseList != null)
    {
        foreach (var horse in horseList)
        {
            if (horse.Standing > 0 & horse.Standing < 4)
            {
                <div class="card StandingCard" style="width: 18rem;">
                    <div class="card-img-top" src="unknown" />
                    <div class="card-img-top" src="unknown" />
                    <div class="card-header">
                        @horse.Standing
                    </div>
                    <div class="card-body">
                        @horse.Name
                    </div>
                    <div class="card-footer">_</div>
                </div>
            }
        }
    }
</div>

<EditForm Model="@horse" OnValidSubmit="submitted">
    <label for="horseId">HorseId:</label>
    <InputNumber id="horseId" @bind-Value="horse.Id"></InputNumber>
    <label for="horseName">Name:</label>
    <InputText id="horseName"  @bind-Value="horse.Name"></InputText>
    <br />
    <button type="submit" class="btn-success"> Go! </button>
    <button type="reset" class="btn-secondary"> Cancel </button>
    <button type="button" class="btn-primary" @onclick="AddHorsey"> Add+ </button>

</EditForm>

<footer class="fixed-bottom"><SurveyPrompt Title="We want to know, How is this experience working for you?" /></footer>

@code {

    private Horse horse = new Horse();
    private Horse[] horseList;
    HttpClient MyHttp = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        MyHttp.BaseAddress = new Uri("https://localhost:5011");
        await refreshList();
    }

    private async Task submitted()
    {
        var response = await MyHttp.GetAsync($"/API/Horsey/{horse.Id}");
        if (response.IsSuccessStatusCode)
        {
            horse = await response.Content.ReadFromJsonAsync<Horse>();
        }
        else
        {
            horse.Name = $"ERR: {response.StatusCode} {response.ReasonPhrase}";
        }
    }

    private async Task AddHorsey()
    {
        var response = await MyHttp.PostAsJsonAsync<Horse>($"/API/Horsey", new Horse { Name = horse.Name });
        if (response.IsSuccessStatusCode)
        {
            //horseList = await response.Content.ReadFromJsonAsync<Horse[]>();
            await refreshList();
        }
        else
        {
            horse.Name = response.ReasonPhrase;
        }
    }

    private async Task TopStandingList()
    {
        var response = await MyHttp.GetAsync("/API/Horsey/TopStanding");
        if (response.IsSuccessStatusCode)
        {
            horseList = await response.Content.ReadFromJsonAsync<Horse[]>();
        }
        else
        {
            horse.Name = $"ERR: {response.StatusCode} {response.ReasonPhrase}";
        }

    }

    private async Task refreshList()
    {
        var response = await MyHttp.GetAsync("/API/Horsey/");
        if (response.IsSuccessStatusCode)
        {
            horseList = await response.Content.ReadFromJsonAsync<Horse[]>();
        }
        else
        {
            horse.Name = $"ERR: {response.StatusCode} {response.ReasonPhrase}";
        }

    }



}
