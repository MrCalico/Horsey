@page "/HorseEdit/{id:int}"
@using Horsey.Domain
@using Horsey.Data
@inject HorseyContext context;

@if (horse != null)
{
    if (Row < 1)
    {
        <label class="col-1">Id</label>
        <label class="col-3">Name</label>
        <label class="col-2">Birthday</label>
        <label class="col-1">Age</label>
        <label class="col-1">Standing</label>
    }
    <EditForm Model="horse">
        <InputNumber class="col-1" @bind-Value="horse.Id" />
        <InputText class="col-3" @bind-Value="horse.Name" @oninput="CheckChanged" />
        <InputDate class="col-2" @bind-Value="horse.Birthday" @oninput="CheckChanged"></InputDate>
        <InputNumber class="col-1" @bind-Value="age"></InputNumber>
        <InputNumber class="col-1" @bind-Value="horse.Standing" @oninput="CheckChanged" />
        @if (isModified)
        {<ToolUpdateSave @bind-isClicked="@isSaveClicked"></ToolUpdateSave>}
        @if (isSaved)
        {<span class="badge-success">Saved</span>}
    </EditForm>
}

@code {

    [Parameter]
    public int id { set; get; }
    [Parameter]
    public int Row { set; get; }

    private HorseyContext _context;
    public Horse horse;

    private bool isModified = false;
    private bool isSaved = false;

    protected override Task OnInitializedAsync()
    {
        _context = context;
        if (id > 0)
        { horse = _context.Horses.Find(id); }
        else
        { horse = new Horse(); }
        return base.OnInitializedAsync();
    }

    private void CheckChanged()
    {
        isModified = true;
        isSaved = false;
    }

    private bool isSaveClicked
    {
        set
        {
            if (value == true)
            {
                if (horse.Id == 0)
                {
                    _context.Horses.Add(horse);
                    _context.SaveChanges();
                    isModified = false;
                    isSaved = true;
                }
                else
                {
                    _context.Horses.Update(horse);
                    _context.SaveChanges();
                    isModified = false;
                    isSaved = true;
                }
            }
        }
        get { return isModified; }
    }

    private int age { get { return Age(horse.Birthday); } set { } }

    private int Age(DateTime Birthday)
    {
        if (Birthday == null)
        {
            Birthday = DateTime.Now;
        }
        DateTime dob = Birthday;
        DateTime PresentYear = DateTime.Now;
        TimeSpan ts = PresentYear - dob;
        DateTime Age = DateTime.MinValue.AddDays(ts.Days);
        return Age.Year;
    }
}