@page "/RaceEdit/{id:int}"
@using Horsey.Domain
@using Horsey.Data
@inject HorseyContext context;
@inject NavigationManager NavigationManager;

@if (race != null)
{
    if (Row < 1)
    {
        <label class="col-1">Id</label>
        <label class="col-3">Name</label>
        <label class="col-3">Date</label>
        <label class="col-3">Standings</label>
    }
<EditForm Model="race">
    <InputNumber class="col-1" @bind-Value="race.Id" />
    <InputText class="col-3" @bind-Value="race.Name" @oninput="CheckChanged"/>
    <InputDate class="col-3" @bind-Value="race.Date" @oninput="CheckChanged"/>
    <label class="col-1 ">@race.Standings.Count()</label>
    <ToolJumpRelated @bind-isClicked="@isJumped"></ToolJumpRelated>
    @if (isModified) { <ToolUpdateSave @bind-isClicked="@isSaveClicked"></ToolUpdateSave> }
</EditForm>
}


@code {
    [Parameter]
    public int id { set; get; }
    [Parameter]
    public int Row { set; get; }

    private bool isModified { set; get; } = false;

    private bool _isJumped;
    private bool isJumped {
        get
        {
            return _isJumped;
        }
        set
        { _isJumped = isJumped;
            NavigationManager.NavigateTo($"/RaceMaster/{race.Id}");
        }
    }

    private HorseyContext _context;
    private Race race;

    protected override Task OnInitializedAsync()
    {
        _context = context;
        if (id > 0)
        {
            race = _context.Races.Find(id);
        }
        else
        {
            race = new Race(){};
        }

        return base.OnInitializedAsync();
    }

    private void CheckChanged()
    {
        isModified = true;
    }


    private bool isSaveClicked {
        set
        {
            if (value==true)
            {
                if (race.Id == 0)
                {
                    _context.Races.Add(race);
                    _context.SaveChanges();
                    isModified = false;
                }
                else
                {
                    _context.Races.Update(race);
                    _context.SaveChanges();
                    isModified = false;
                }
            }
        }
        get { return isModified; }
    }

    private void JumpRelated() { }
}
