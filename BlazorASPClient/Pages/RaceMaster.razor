@page "/RaceMaster/{id:int}"
@using Horsey.Domain
@using Horsey.Data
@using Microsoft.EntityFrameworkCore;

@inject HorseyContext context;
@inject NavigationManager NavigationManager;

@if (race != null)
{
    if (Row < 1)
    {
        <label class="col-1">Id</label>
        <label class="col-3">Name</label>
        <label class="col-3">Date</label>
        <label class="col-3">Standings</label>
    }
    <EditForm Model="race">
        <InputNumber class="col-1" @bind-Value="race.Id" />
        <InputText class="col-3" @bind-Value="race.Name" @oninput="CheckChanged" />
        <InputDate class="col-3" @bind-Value="race.Date" @oninput="CheckChanged" />
        <label class="col-1 ">@race.Standings.Count()</label>
        <ToolJumpBackRelated @bind-isClicked="@isJumped"></ToolJumpBackRelated>
        @if (isModified)
        {
            <ToolUpdateSave @bind-isClicked="@isModified"></ToolUpdateSave>
        }
    </EditForm>
    <div class="float-right col-4">
        <ToolAddNew @bind-isClicked="isAddClicked"></ToolAddNew>
    </div>
    if (race.Standings.ToList() != null)
    {
        int row = 0;
        foreach (Standing standing in race.Standings.ToList())
        {
            <StandingEdit RaceId="standing.RaceId" Position="standing.Position" Row="row++"></StandingEdit>
        }
    }
}
@if(isAddClicked)
{
    <div>
        <StandingEdit Row="@(1)" RaceId="id" Position="@(0)"/>
    </div>
}

@code {
        [Parameter]
        public int id { set; get; }
        [Parameter]
        public int Row { set; get; }

    private bool isModified = false;

    private bool _isJumped;
    private bool isJumped
    {
        get { return _isJumped; }
        set 
        {
            _isJumped = isJumped;
            NavigationManager.NavigateTo($"/RaceList");
        }
    }

    private bool _isAddClicked = false;
    private bool isAddClicked {
        get { return _isAddClicked; } 
        set { _isAddClicked = value; } 
    }

    private HorseyContext _context;
    private Race race;

    protected override Task OnInitializedAsync()
    {
        _context = context;
        race = _context.Races
                            .Where(r => r.Id == id)
                            .Include(s => s.Standings)
                            .ThenInclude(h => h.Horse)
                            .FirstOrDefault<Race>();

        race.Standings = race.Standings.OrderBy(s => s.Position).ToList();  // Order by Position
        return base.OnInitializedAsync();
    }

    private void CheckChanged()
    {
        isModified = true;
    }

    private void JumpRelated() { }
}